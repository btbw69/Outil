import streamlit as st
import pandas as pd
from io import BytesIO
from st_aggrid import AgGrid, GridOptionsBuilder

# Param√®tres de la page Streamlit
st.set_page_config(page_title="Exploitation des donn√©es d'√©ligibilit√©", layout="wide")
st.title("Exploitation des donn√©es d'√©ligibilit√©")

# Uploader le fichier Excel
uploaded_file = st.file_uploader("T√©l√©versez le fichier d'offres", type=[".xlsx"])

if uploaded_file:
    # Lire les donn√©es depuis le fichier Excel
    df = pd.read_excel(uploaded_file)

    # Mapping des colonnes
    column_mapping = {
        'Name': 'Site',
        'OBL': 'Op√©rateur',
        'Type Physical Link': 'Technologie',
        'bandwidth': 'D√©bit',
        'FASSellPrice': "Frais d'acc√®s",
        'CRMSellPrice': 'Prix mensuel'
    }
    df = df.rename(columns=column_mapping)

    # Cr√©er un tableau de base avec Ag-Grid
    st.subheader("Tableau avec listes d√©roulantes pour Technologie et Op√©rateur")

    # Configuration de base d'Ag-Grid avec la liste d√©roulante pour Technologie
    gb = GridOptionsBuilder.from_dataframe(df)

    # Liste d√©roulante pour la colonne "Technologie"
    gb.configure_column('Technologie', editable=True, cellEditor='agSelectCellEditor', 
                        cellEditorParams={'values': ['FTTO', 'FTTH']})
    
    # Afficher Ag-Grid avec la liste d√©roulante pour Technologie
    grid_options = gb.build()
    grid_response = AgGrid(df, gridOptions=grid_options, update_mode='MODEL_CHANGED')

    # R√©cup√©rer les donn√©es modifi√©es apr√®s interaction
    updated_result = grid_response['data']

    # V√©rifier si une technologie a √©t√© s√©lectionn√©e
    if updated_result:
        selected_techno = updated_result[0]['Technologie']  # Prendre la premi√®re ligne pour la technologie choisie

        # Filtrer les op√©rateurs disponibles pour la technologie s√©lectionn√©e
        filtered_operators = df[df['Technologie'] == selected_techno]['Op√©rateur'].dropna().unique()

        # Maintenant, ajouter la liste d√©roulante pour la colonne "Op√©rateur"
        gb.configure_column('Op√©rateur', editable=True, cellEditor='agSelectCellEditor', 
                            cellEditorParams={'values': filtered_operators})

        # Recharger la grille avec la nouvelle configuration (Op√©rateur filtr√©)
        grid_options = gb.build()
        grid_response = AgGrid(df, gridOptions=grid_options, update_mode='MODEL_CHANGED')

        # R√©cup√©rer les donn√©es mises √† jour
        updated_result = grid_response['data']

    # Afficher le tableau mis √† jour
    st.write("Tableau mis √† jour avec les s√©lections :")
    st.dataframe(updated_result)

    # Export des r√©sultats en Excel
    output = BytesIO()
    updated_result.to_excel(output, index=False, engine='openpyxl')
    output.seek(0)
    st.download_button(
        label="üì• T√©l√©charger le fichier Excel",
        data=output,
        file_name="resultat_par_site.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
