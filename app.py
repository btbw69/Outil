import streamlit as st
import pandas as pd
from io import BytesIO

st.set_page_config(layout="wide")
st.title("Exploitation des donn√©es d'√©ligibilit√©")

uploaded_file = st.file_uploader("T√©l√©versez le fichier d'offres", type=[".xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Renommer les colonnes
    column_mapping = {
        'Name': 'Site',
        'OBL': 'Op√©rateur',
        'Type Physical Link': 'Technologie',
        'bandwidth': 'D√©bit',
        'FASSellPrice': "Frais d'acc√®s",
        'CRMSellPrice': 'Prix mensuel'
    }
    df = df.rename(columns=column_mapping)

    # --- Onglet 3 - "Construire son r√©sultat par site" ---
    with st.expander("Construire son r√©sultat par site"):
        st.markdown("### Construire son r√©sultat par site")

        # Liste des sites
        sites = df['Site'].dropna().unique()

        # Cr√©er un tableau vide avec les colonnes souhait√©es
        result = pd.DataFrame({
            'Site': sites,
            'Technologie': [None] * len(sites),
            'Op√©rateur': [None] * len(sites),
            'D√©bit': [None] * len(sites),
            'Frais d\'acc√®s': [None] * len(sites),
            'Prix mensuel': [None] * len(sites)
        })

        # Pour chaque site, cr√©er des s√©lections pour la techno, op√©rateur et d√©bit
        for i, site in enumerate(sites):
            # S√©lection de la technologie
            technos_disponibles = df[df['Site'] == site]['Technologie'].dropna().unique()
            techno_choice = st.selectbox(f"Choisissez la technologie pour {site}", options=technos_disponibles, key=f"techno_{i}")
            result.loc[i, 'Technologie'] = techno_choice

            # S√©lection de l'op√©rateur en fonction de la technologie choisie
            operateurs_disponibles = df[(df['Site'] == site) & (df['Technologie'] == techno_choice)]['Op√©rateur'].dropna().unique()
            operateur_choice = st.selectbox(f"Choisissez l'op√©rateur pour {site} ({techno_choice})", options=operateurs_disponibles, key=f"operateur_{i}")
            result.loc[i, 'Op√©rateur'] = operateur_choice

            # S√©lection du d√©bit en fonction de la techno et op√©rateur choisis
            debits_disponibles = df[(df['Site'] == site) & (df['Technologie'] == techno_choice) & (df['Op√©rateur'] == operateur_choice)]['D√©bit'].dropna().unique()
            debit_choice = st.selectbox(f"Choisissez le d√©bit pour {site} ({operateur_choice})", options=debits_disponibles, key=f"debit_{i}")
            result.loc[i, 'D√©bit'] = debit_choice

            # Calcul des frais d'acc√®s et du prix mensuel
            frais_acces = df[(df['Site'] == site) & (df['Technologie'] == techno_choice) & (df['Op√©rateur'] == operateur_choice) & (df['D√©bit'] == debit_choice)]['Frais d\'acc√®s'].values
            prix_mensuel = df[(df['Site'] == site) & (df['Technologie'] == techno_choice) & (df['Op√©rateur'] == operateur_choice) & (df['D√©bit'] == debit_choice)]['Prix mensuel'].values

            result.loc[i, 'Frais d\'acc√®s'] = frais_acces[0] if len(frais_acces) > 0 else 0
            result.loc[i, 'Prix mensuel'] = prix_mensuel[0] if len(prix_mensuel) > 0 else 0

        # Alternance de couleurs pour chaque site
        result_html = ""
        colors = ["#f2f2f2", "#ffffff"]  # Couleurs altern√©es

        for i, row in result.iterrows():
            color = colors[i % 2]  # Alterner la couleur
            result_html += f'<tr style="background-color:{color}">'
            for col in result.columns:
                result_html += f'<td>{row[col]}</td>'
            result_html += '</tr>'

        # Table HTML avec couleurs altern√©es
        st.markdown(f"""
            <table style="width:100%; border-collapse: collapse; text-align:left;">
                <thead>
                    <tr style="background-color:#e0e0e0;">
                        <th>Site</th>
                        <th>Technologie</th>
                        <th>Op√©rateur</th>
                        <th>D√©bit</th>
                        <th>Frais d'acc√®s</th>
                        <th>Prix mensuel</th>
                    </tr>
                </thead>
                <tbody>
                    {result_html}
                </tbody>
            </table>
        """, unsafe_allow_html=True)

        # Export des r√©sultats en Excel
        output = BytesIO()
        result.to_excel(output, index=False, engine='openpyxl')
        output.seek(0)
        st.download_button(
            label="üì• T√©l√©charger le fichier Excel",
            data=output,
            file_name="resultat_par_site.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
