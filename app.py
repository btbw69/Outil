import streamlit as st
import pandas as pd
from io import BytesIO

st.set_page_config(page_title="Exploitation des donn√©es d'√©ligibit√©", layout="wide")
st.title("Exploitation des donn√©es d'√©ligibit√©")

uploaded_file = st.file_uploader("T√©l√©versez le fichier d'offres", type=[".xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Mapping manuel √† partir des noms r√©els (corrig√© avec majuscules)
    column_mapping = {
        'Name': 'Site',
        'OBL': 'Op√©rateur',
        'Type Physical Link': 'Technologie',
        'bandwidth': 'D√©bit',
        'FASSellPrice': "Frais d'acc√®s",
        'CRMSellPrice': 'Prix mensuel'
    }

    df = df.rename(columns=column_mapping)

    # Exclure les lignes o√π Already Fiber == 'AvailableSoon'
    if 'Already Fiber' in df.columns:
        df = df[df['Already Fiber'] != 'AvailableSoon']

    # Remplacer les d√©bits FTTH 1000M et 1000/200M par "1 gbits"
    df['D√©bit'] = df.apply(
        lambda row: '1 gbits' if row['Technologie'] == 'FTTH' and row['D√©bit'] in ['1000M', '1000/200M'] else row['D√©bit'],
        axis=1
    )

    onglets = st.tabs(["Par choix de techno et d√©bit", "Par choix techno et op√©rateur"])

    with onglets[0]:
    # --- Vue par techno et d√©bit ---
        # V√©rification post-mapping
        required = ['Site', 'Op√©rateur', 'Technologie', 'D√©bit', 'Prix mensuel', "Frais d'acc√®s"]
        missing_columns = [col for col in required if col not in df.columns]
        if missing_columns:
            st.error("Le fichier est invalide. Colonnes manquantes apr√®s mapping : " + ", ".join(missing_columns))
        else:
            technos = df['Technologie'].dropna().unique()
            techno_choice = st.selectbox("Choisissez une technologie", options=["Toutes"] + list(technos))

            engagement = st.slider("Dur√©e d'engagement (mois)", min_value=12, max_value=60, step=12, value=36)

            if techno_choice != "Toutes":
                filtered_df_for_debit = df[df['Technologie'] == techno_choice]
            else:
                filtered_df_for_debit = df

            debits = sorted(filtered_df_for_debit['D√©bit'].dropna().unique())
            debit_options = ["Tous"] + list(debits)

            # Fix pour √©viter erreur si "1 gbits" non trouv√©
            if techno_choice == "FTTH" and "1 gbits" in debit_options:
                debit_index = debit_options.index("1 gbits")
            else:
                debit_index = 0

            debit_choice = st.selectbox("Choisissez un d√©bit (optionnel)", options=debit_options, index=debit_index)

            # Application des filtres (sans filtrer par engagement)
            df_filtered = df.copy()
            if techno_choice != "Toutes":
                df_filtered = df_filtered[df_filtered['Technologie'] == techno_choice]
            if debit_choice != "Tous":
                df_filtered = df_filtered[df_filtered['D√©bit'] == debit_choice]

            if df_filtered.empty:
                st.warning("Aucune offre ne correspond aux crit√®res s√©lectionn√©s.")
            else:
                # Remplissage des valeurs manquantes pour les frais d'acc√®s
                df_filtered["Frais d'acc√®s"] = df_filtered["Frais d'acc√®s"].fillna(0)

                # Calcul du co√ªt total avec la valeur du slider
                df_filtered['Co√ªt total'] = df_filtered['Prix mensuel'] * engagement + df_filtered["Frais d'acc√®s"]

                # S√©lection de l'offre la moins ch√®re par site
                best_offers = df_filtered.sort_values('Co√ªt total').groupby('Site').first().reset_index()

                # Affichage du nombre de sites √©ligibles
                nb_sites = best_offers['Site'].nunique()
                st.markdown(f"### Nombre de sites √©ligibles √† la {techno_choice} : {nb_sites}")

                # Colonnes √† exclure
                colonnes_a_exclure = ['NDI', 'INSEECode', 'rivoli code', 'Available Copper Pair', 'Needed Coppoer Pair']
                colonnes_finales = [col for col in best_offers.columns if col not in colonnes_a_exclure]

                best_offers_reduits = best_offers[colonnes_finales]

                st.subheader("Meilleures offres par site")
                st.dataframe(best_offers_reduits, use_container_width=True)

                # Export Excel
                st.download_button(
                    label="üì• T√©l√©charger le fichier Excel",
                    data=output,
                    file_name="meilleures_offres.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

    with onglets[1]:
        st.info("üöß Cette vue sera bient√¥t disponible.")
