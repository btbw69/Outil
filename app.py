import streamlit as st
import pandas as pd
from io import BytesIO
from st_aggrid import AgGrid, GridOptionsBuilder

# Param√®tres de la page Streamlit
st.set_page_config(page_title="Exploitation des donn√©es d'√©ligibilit√©", layout="wide")
st.title("Exploitation des donn√©es d'√©ligibilit√©")

# Uploader le fichier Excel
uploaded_file = st.file_uploader("T√©l√©versez le fichier d'offres", type=[".xlsx"])

if uploaded_file:
    # Lire les donn√©es depuis le fichier Excel
    df = pd.read_excel(uploaded_file)

    # Mapping des colonnes
    column_mapping = {
        'Name': 'Site',
        'OBL': 'Op√©rateur',
        'Type Physical Link': 'Technologie',
        'bandwidth': 'D√©bit',
        'FASSellPrice': "Frais d'acc√®s",
        'CRMSellPrice': 'Prix mensuel'
    }
    df = df.rename(columns=column_mapping)

    # Exclure les lignes o√π Already Fiber == 'AvailableSoon' ou 'UnderCommercialTerms'
    if 'Already Fiber' in df.columns:
        df = df[(df['Already Fiber'] != 'AvailableSoon') & (df['Already Fiber'] != 'UnderCommercialTerms')]

    # Remplacer les d√©bits FTTH 1000M et 1000/200M par "1 gbits"
    df['D√©bit'] = df.apply(
        lambda row: '1 gbits' if row['Technologie'] == 'FTTH' and row['D√©bit'] in ['1000M', '1000/200M'] else row['D√©bit'],
        axis=1
    )

    # Onglets
    onglets = st.tabs(["Choisir la techno et le d√©bit souhait√©s", "Choisir une techno et un op√©rateur", "Construire son r√©sultat par site"])

    # --- Troisi√®me onglet : "Construire son r√©sultat par site" ---
    with onglets[2]:
        st.markdown("### Construire son r√©sultat par site")

        # Liste des sites
        sites = df['Site'].dropna().unique()

        # Cr√©er un tableau vide avec les colonnes souhait√©es
        result = pd.DataFrame({
            'Site': sites,
            'Technologie': [None] * len(sites),
            'Op√©rateur': [None] * len(sites),
            'D√©bit': [None] * len(sites),
            'Frais d\'acc√®s': [None] * len(sites),
            'Prix mensuel': [None] * len(sites)
        })

        # Configuration des options de la grille Ag-Grid
        gb = GridOptionsBuilder.from_dataframe(result)
        
        # Ajout de listes d√©roulantes dans les cellules
        gb.configure_column('Technologie', editable=True, cellEditor='agSelectCellEditor', 
                            cellEditorParams={'values': ['FTTH', 'ADSL', 'VDSL', 'Fibre']})
        gb.configure_column('Op√©rateur', editable=True, cellEditor='agSelectCellEditor', 
                            cellEditorParams={'values': df['Op√©rateur'].dropna().unique()})
        gb.configure_column('D√©bit', editable=True, cellEditor='agSelectCellEditor', 
                            cellEditorParams={'values': df['D√©bit'].dropna().unique()})

        grid_options = gb.build()

        # Affichage du tableau interactif Ag-Grid
        grid_response = AgGrid(result, gridOptions=grid_options, enable_enterprise_modules=True, update_mode='MODEL_CHANGED')

        # R√©cup√©rer les donn√©es modifi√©es apr√®s interaction
        updated_result = grid_response['data']

        # Afficher le tableau mis √† jour
        st.write("Tableau mis √† jour avec les s√©lections :")
        st.dataframe(updated_result)

        # Export des r√©sultats en Excel
        output = BytesIO()
        updated_result.to_excel(output, index=False, engine='openpyxl')
        output.seek(0)
        st.download_button(
            label="üì• T√©l√©charger le fichier Excel",
            data=output,
            file_name="resultat_par_site.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
